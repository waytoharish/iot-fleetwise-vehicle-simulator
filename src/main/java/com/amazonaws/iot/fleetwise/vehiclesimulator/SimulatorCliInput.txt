/*
// SimulatorCliInput.java
package com.amazonaws.iot.fleetwise.vehiclesimulator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.extern.jackson.Jacksonized;


@JsonIgnoreProperties(
        ignoreUnknown = true
)
@Data
@Jacksonized
@Builder
public class SimulatorCliInput {

    @JsonProperty("simulationMetaData")
    private SimulationMetaData simulationMetaData;

    @JsonProperty("edgeConfigFilename")
    private  String configPath;

    @JsonProperty("simulationScriptPath")
    private  String localPath;

    */
/*public SimulatorCliInput(@JsonProperty("simulationMetaData")  SimulationMetaData simulationMetaData, @JsonProperty("edgeConfigFilename")  String configPath, @JsonProperty("simulationScriptPath")  String localPath) {
        super();
        this.simulationMetaData = simulationMetaData;
        this.configPath = configPath;
        this.localPath = localPath;
    }


    public final SimulationMetaData getSimulationMetaData() {
        return this.simulationMetaData;
    }


    public final String getConfigPath() {
        return this.configPath;
    }


    public final String getLocalPath() {
        return this.localPath;
    }


    public final SimulationMetaData component1() {
        return this.simulationMetaData;
    }


    public final String component2() {
        return this.configPath;
    }


    public final String component3() {
        return this.localPath;
    }


    public final SimulatorCliInput copy(@JsonProperty("simulationMetaData")  SimulationMetaData simulationMetaData, @JsonProperty("edgeConfigFilename")  String configPath, @JsonProperty("simulationScriptPath")  String localPath) {
        Intrinsics.checkNotNullParameter(simulationMetaData, "simulationMetaData");
        Intrinsics.checkNotNullParameter(configPath, "configPath");
        Intrinsics.checkNotNullParameter(localPath, "localPath");
        return new SimulatorCliInput(simulationMetaData, configPath, localPath);
    }


    public String toString() {
        return "SimulatorCliInput(simulationMetaData=" + this.simulationMetaData + ", configPath=" + this.configPath + ", localPath=" + this.localPath + ')';
    }

    public int hashCode() {
        int result = this.simulationMetaData.hashCode();
        result = result * 31 + this.configPath.hashCode();
        result = result * 31 + this.localPath.hashCode();
        return result;
    }

    public boolean equals(@Nullable Object other) {
        if (this == other) {
            return true;
        } else if (!(other instanceof SimulatorCliInput)) {
            return false;
        } else {
            SimulatorCliInput var2 = (SimulatorCliInput)other;
            if (!Intrinsics.areEqual(this.simulationMetaData, var2.simulationMetaData)) {
                return false;
            } else if (!Intrinsics.areEqual(this.configPath, var2.configPath)) {
                return false;
            } else {
                return Intrinsics.areEqual(this.localPath, var2.localPath);
            }
        }
    }*//*

}*/
